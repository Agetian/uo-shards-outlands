using System;
using System.Collections.Generic;
using Server.Custom.Townsystem;
using Server.Commands;

namespace Server.Gumps
{
    public class OCVulnerabilityCalendarGump : Gump
    {
        private int m_PageOffset;

        public static void Initialize()
        {
            CommandSystem.Register("VulnMap", AccessLevel.Player, new CommandEventHandler(VulnMap_OnCommand));
        }

        public static void VulnMap_OnCommand(CommandEventArgs args)
        {
            var mob = args.Mobile;

            mob.CloseGump(typeof(OCVulnerabilityCalendarGump));
            mob.SendGump(new OCVulnerabilityCalendarGump());
        }

        public OCVulnerabilityCalendarGump(int pageOffset = 0)
            : base(0, 0)
        {
            m_PageOffset = pageOffset;

            this.Closable = true;
            this.Disposable = true;
            this.Dragable = true;
            this.Resizable = false;
            this.AddPage(0);
            this.AddBackground(5, 5, 431, 348, 9200);
            

            this.AddHtml(33, 70, 24, 24, @"<center>S", true, false);
            this.AddHtml(55, 70, 24, 24, @"<center>M", true, false);
            this.AddHtml(77, 70, 24, 24, @"<center>T", true, false);
            this.AddHtml(99, 70, 24, 24, @"<center>W", true, false);
            this.AddHtml(121, 70, 24, 24, @"<center>T", true, false);
            this.AddHtml(143, 70, 24, 24, @"<center>F", true, false);
            this.AddHtml(165, 70, 24, 24, @"<center>S", true, false);

            if (pageOffset < 1)
                AddButton(187, 49, 9904, 9903, 1, GumpButtonType.Reply, 0);

            if (pageOffset > -1)
                AddButton(12, 49, 9910, 9909, 2, GumpButtonType.Reply, 0);

            DateTime now = DateTime.Now;

            var month = now.Month + pageOffset;
            if (month < 1)
                month = 12;
            else if (month > 12)
                month = 1;

            int count = DaysInMonth(month);
            int offset = (int)new DateTime(now.Year, month, 1).DayOfWeek;

            this.AddHtml(12, 13, 410, 28, String.Format(@"<h2><center>{0} Vulnerability Calendar", MonthNames[month - 1]), (bool)true, (bool)false);

            for (int i = 0; i < count; i++)
            {
                this.AddHtml(33 + 22 * ((i + offset) % 7), 93 + 40 * (int)((i + offset)/7), 24, 40, String.Format("<center>{0}<br>{1}", i+1, TownStrings[OCVulnerability.Vulnerabilities[month - 1][i] - 1]), true, false);
            }

            this.AddHtml(209, 70, 200, 260, @"<center>Britain: B<br>Cove: C<br>Jhelom: J<br>Magincia: Ma<br>Minoc: Mi<br>Moonglow: Mo<br>Nujel'm: N<br>Ocllo: O<br>Serpent's Hold: Se<br>Skara Brae: Sk<br>Trinsic: T<br>Vesper: V<br>Yew: Y", true, false);
        }

        public static int DaysInMonth(int month)
        {
            if (month == 2)
                return 28;
            else if (month == 4 || month == 6 || month == 9 || month == 11)
                return 30;
            else
                return 31;
        }

        public override void OnResponse(Network.NetState sender, RelayInfo info)
        {
            var from = sender.Mobile;

            if (info.ButtonID == 1)
                from.SendGump(new OCVulnerabilityCalendarGump(Math.Max(1, m_PageOffset+1)));
            else if (info.ButtonID == 2)
                from.SendGump(new OCVulnerabilityCalendarGump(Math.Min(-1, m_PageOffset-1)));
        }

        public static readonly string[] TownStrings = new string[] { "B", "C", "J", "Ma", "Mi", "Mo", "N", "O", "Se", "Sk", "T", "V", "Y" };
        public static readonly string[] MonthNames = new string[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
    }
}
